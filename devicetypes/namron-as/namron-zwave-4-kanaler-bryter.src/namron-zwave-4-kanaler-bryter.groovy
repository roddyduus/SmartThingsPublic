/*
 * -----------------------
 * --- DEVICE HANDLER ----
 * -----------------------
 *
 * STOP:  Do NOT PUBLISH the code to GitHub, it is a VIOLATION of the license terms.
 * You are NOT allowed share, distribute, reuse or publicly host (e.g. GITHUB) the code. Refer to the license details on our website.
 *
 */

/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "02.02.01"
}

/**
 *
 *  Copyright 2017 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
*/

metadata {
	definition (name: "NAMRON Z-WAVE 4 KANALER BRYTER", namespace: "NAMRON AS", author: "smartthings", ocfDeviceType: "x.com.st.d.remotecontroller", mcdSync: !separateDevices) {
		capability "Actuator"
		capability "Button"
		capability "Holdable Button"
		capability "Configuration"
		capability "Sensor"
		capability "Battery"
		capability "Health Check"
        
        ///attribute "codeVersion", "string"
        ///attribute "dhName", "string"
        
        fingerprint type: "1801", manufacturer: "0330", prod: "0300", model: "A305", deviceJoinName: "NAMRON Z-WAVE 4 KANALER BRYTER", vid: "3ec6ac94-042b-3837-b180-2991a9a84522", mnmn: "SmartThingsCommunity" // zw:Ss2 type:1801 mfr:0330 prod:0300 model:A305 ver:1.26 zwv:5.03 lib:03 cc:5E,55,98,6C sec:86,85,8E,70,5B,59,72,5A,73,80,84,7A secOut:26 role:04 ff:9600 ui:9600
    
	}

	tiles {
		multiAttributeTile(name:"summary", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.button", key: "PRIMARY_CONTROL") {
            	attributeState "", label: "", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#ffffff", defaultState: true
				attributeState "pushed", label: 'Pushed', icon: "st.unknown.zwave.remote-controller", backgroundColor: "#ffffff"
				attributeState "held", label: 'Held', icon: "st.unknown.zwave.remote-controller", backgroundColor: "#00A0DC"
			}
			tileAttribute("device.battery", key: "SECONDARY_CONTROL") {
				attributeState("default", label:'Battery: ${currentValue}%', unit:"%")
			}
            /*tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action:"switch level.setLevel"
            }
            tileAttribute ("device.color", key: "COLOR_CONTROL") {
                attributeState "color", action:"setAdjustedColor"
            }*/
        }

        if (!separateDevices) {
            childDeviceTiles("outlets")
        }
        
        main "summary"
        details(["summary"])
	}
}

preferences {
    input title: "", description: "Heatit Z-Push Button Device Handler v${clientVersion()}", displayDuringSetup: false, type: "paragraph", element: "paragraph"
}

import groovy.json.JsonOutput

private getSeparateDevices() { false } // Do we setup separate devices for each endpoint?
private getLOW_BATTERY_THRESHOLD() { 20 }

/////////////////////////////
// Installation and update //
/////////////////////////////
def installed() {
    log.trace "Installed called: ${device.deviceNetworkId}"
	runIn(0, initialize, [overwrite: true])  // Updated/Installed is called multiple times from the platform
}

def updated() {
    log.trace "Updated called: ${device.deviceNetworkId}"
	runIn(0, initialize, [overwrite: true])  // Updated/Installed is called multiple times from the platform
}

def uninstalled() {
    log.trace "Uninstalled called: ${device.deviceNetworkId}"
}

def initialize() {
	// Device-Watch simply pings if no device events received for 8 hours (default wake up) with 15 minute grace (checkInterval)
	sendEvent(name: "checkInterval", value: 8 * 60 * 60 + 15 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID])
    sendEvent(name: "numberOfButtons", value: numberOfButtonsOnDevice, descriptionText: "$numberOfButtonsOnDevice supported scene controller buttons") // Initialize default
    sendEvent(name: "supportedButtonValues", value: [ "pushed", "held" ].encodeAsJson(), descriptionText: "4 supported scene controller buttons") // Initialize default
    
    createChildDevices() // Create child devices as required after registering number of buttons
    
	sendHubCommand(response(configure()).toHubAction())
}

def ping() {
    log.warn "Ping called: ${device.deviceNetworkId}" // We shouldn't be here, it's a sleepy device
}

// Configuration
private setConfigParameters() {
    def cmds = []

    if (isHeatIt()) {
        cmds += configureHeatIt()
    }

    cmds ? secureSequence(cmds, 500) : []
}

private configureHeatIt() {
    def cmds = []
    def paramValues = []

    return cmds
}

def configure() {
    log.trace "Configure called: ${device.deviceNetworkId}\n${zwaveInfo}"

    runIn(60, refresh) // Give it some time and then run refresh
    
    def cmds = []
    
    //cmds += discoverConfigParameters(), // DEBUGGING

    // Identify and configure the thermostat
    if (!state.MSR) { // If we don't have a MSR, first get it (and wait for it to complete)
        log.debug "Getting Device MSR"
        cmds += [
            zwave.manufacturerSpecificV2.manufacturerSpecificGet().format(),
            zwave.versionV1.versionGet().format(),
        ]
    } else {
        log.trace "Device MSR: $state.MSR"
    }

    cmds << zwave.batteryV1.batteryGet().format() // Battery level

    cmds = (cmds ? delayBetween(cmds, 1000) + "delay 100" : []) + setConfigParameters()
    cmds
}

//////////////////////
// Event Generation //
//////////////////////
def parse(String description) {
	//log.trace "${device.deviceNetworkId}: $description"

    sendEvent([name: "codeVersion", value: clientVersion()]) // Save client version for parent app
    sendEvent([name: "dhName", value: "Heatit Z-Push Button Device Handler"]) // Save DH Name for parent app

    def result = []
	if (description.startsWith("Err")) {
		result = createEvent(descriptionText:description, isStateChange:true)
	} else if (description != "updated") {
		def cmd = zwave.parse(description, commandClassCapabilities)
		if (cmd) {
			result += zwaveEvent(cmd)
		}
		else {
			log.warn "Unparsed description $description"
		}
	}
    if (result) {
        log.debug result
    }
	result
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
    log.warn "SecurityMessageEncapsulation $cmd"
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassCapabilities)
	if (encapsulatedCommand) {
        state.sec = 1
		zwaveEvent(encapsulatedCommand)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	log.warn cmd
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassCapabilities)
	if (encapsulatedCommand) {
		zwaveEvent(encapsulatedCommand, cmd.sourceEndPoint as Integer)
	} else {
        log.warn "multichannelv3.MultiChannelCmdEncap: unrecognized command $cmd"
    }
}

private secure(physicalgraph.zwave.Command cmd) {
    //log.trace cmd
    //log.trace "Secure: $state.sec"
	if (state.sec) {
		zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	} else {
		cmd.format()
	}
}

private secureSequence(commands, delay=300) { // Some of these params need more time to get on this switch or they are dropped
	delayBetween(commands.collect{ secure(it) }, delay)
}

// Multi channel encapsulation of a command with a target endpoint and an optional bitmask addressing
private encap(cmd, ep, bitMask = false) {
    zwave.multiChannelV3.multiChannelCmdEncap(bitAddress: bitMask, destinationEndPoint: ep).encapsulate(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd, ep = null) {
    log.trace "$ep: $cmd"
	updateDataValue("MSR", String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId))
	return []
}

def zwaveEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd, ep = null) {
    log.trace "$ep: $cmd"
	updateDataValue("Ver", cmd.applicationVersion + "." + cmd.applicationSubVersion)
	return []
}

def zwaveEvent(physicalgraph.zwave.Command cmd, ep = null) {
	log.warn "$ep: Unexpected zwave command $cmd"
	return []
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd, ep = null) {
	log.trace "$ep: $cmd"
	def map = [ name: "battery", unit: "%" ]
	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "Has a low battery"
	} else {
		map.value = cmd.batteryLevel
		map.descriptionText = "Battery is at ${cmd.batteryLevel}%"
	}
	state.lastbatt = now()
	log.info "Battery level $map.value%"
	createEvent(map) 
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv2.WakeUpNotification cmd, ep = null) {
	log.trace "$ep: $cmd"
    
	def event = createEvent(descriptionText: "${device.displayName} woke up", isStateChange: false)
    def cmds = []
    if(!state.MSR) { // Until we have MSR we don't know what product we have, so try both
        log.debug "Getting MSR"
        cmds << zwave.manufacturerSpecificV2.manufacturerSpecificGet()
    }
    
    // Each time the device is woken up
    if (!device.currentValue("battery") || (device.currentValue("battery") < LOW_BATTERY_THRESHOLD)) { // If we don't have battery info or if battery is low, get latest levels
    	log.debug "Requesting battery update"
    	cmds << zwave.batteryV1.batteryGet() // Battery level
    }

    //cmds << zwave.wakeUpV2.wakeUpIntervalCapabilitiesGet() // Get Wake up interval capabilities
    //cmds << zwave.wakeUpV2.wakeUpIntervalGet() // Check our current wake up interval

	cmds << zwave.wakeUpV2.wakeUpNoMoreInformation() // All DONE
    
    //log.trace "Sending: $cmds"
    
    [event, response(secureSequence(cmds))]
}

def zwaveEvent(physicalgraph.zwave.commands.centralscenev1.CentralSceneNotification cmd, ep = null) {
    log.trace "$ep: $cmd"
    
	def result = []
    def key = ""
    switch (cmd.keyAttributes) {
    	case 0:
        	key = "pushed"
            log.trace "Button ${cmd.sceneNumber} was pushed"
            break
        case 1:
        	log.trace "Button ${cmd.sceneNumber} was released"
            break
        case 2:
        	key = "held"
            log.trace "Button ${cmd.sceneNumber} was held"
            break
        default:
        	log.error "Unknown keyAttributes: ${cmd.keyAttributes}"
            return
    }

    result = createEvent(name: "button", value: key, data: [buttonNumber: cmd.sceneNumber], descriptionText: "$device.displayName button ${cmd.sceneNumber} was ${key ?: "released"}", isStateChange: true)
    def child = childDevices.find{it.deviceNetworkId == getChildDni(cmd.sceneNumber)}
    if (!child) {
        log.error "Child button ${cmd.sceneNumber} not found"
    } else {
        child.sendEvent(name: "button", value: key, data: [buttonNumber: 1], descriptionText: "$child.displayName button was ${key ?: "released"}", isStateChange: true)
    }
    
    result
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd, ep = null) {
    log.trace "$ep: $cmd"
    
    def events = []
    
    if (isHeatIt()) {
        events << processHeatItConfigReport(cmd)
    }
    
    events?.flatten()
}

private processHeatItConfigReport(cmd) {
    //log.trace "Processing HeatIt Config report"

    def result = []
    switch (cmd.parameterNumber) {
        default:
            log.warn "Unknown configuration report: $cmd"
	        break
    }
    
    result
}

/////////////////////////////
// Installation and update //
/////////////////////////////
// Refresh all or a specific endpoint device
def refresh() {
    log.trace "Refresh called\n${zwaveInfo?.inspect()}"

    def cmds = []

    cmds ? sendHubCommand(response(secureSequence(cmds, 500)).toHubAction()) : [] // This can be called from a timer function
}

private void createChildDevices() {
    def childs = childDevices
    log.trace "Installed child devices: $childs"

    try {
        for (i in 1..numberOfButtonsOnDevice) {
            def child = childs.find { (it.deviceNetworkId?.tokenize("-ep")?.last() as Integer) == i }
            if (child) {
                if (!separateDevices) { // Update labels only if we aren't using separate devices
                    if (child.label?.endsWith(")")) { // If it doesn't end with ), the label was updated manually, so ignore it
                        def newLabel = "${device.displayName} ${(child.label =~ /[^)][^(]*$/)[0]}" // Preserve the (xxx) at the end, just add the parent label
                        log.debug "Setting $child name to $newLabel"
                        child.setLabel(newLabel)
                    }
                }
                continue // We're done here
            } else {
                log.info "Adding child device button ${i}"
                child = addChildDevice(
                    "smartthings",
                    "Child Button",
                    getChildDni(i),
                    device.hub.id,
                    [
                        completedSetup: true,
                        label: "${device.displayName} (Button ${i})",
                        isComponent: !separateDevices
                    ] + (!separateDevices ? [ componentName: "Button$i", componentLabel: "Button $i" ] : [:]) // Don't set this for isComponent is false
                )
                child.sendEvent(name: "supportedButtonValues", value: JsonOutput.toJson(["pushed", "held"]), displayed: false)
            }
        }
    } catch(Exception e) {
        log.error "Unable to create child devices: ${e}"
    }
}

private getChildDni(i) { 
	return "${device.deviceNetworkId}-ep${i}"
}

// Checks if it's a HeatIt thermostat
private isHeatIt() {
    (
        (state.MSR?.startsWith("0305") || ("0305" == zwaveInfo?.mfr)) ||
        (state.MSR?.startsWith("0330") || ("0330" == zwaveInfo?.mfr)) ||
        (state.MSR?.startsWith("0438") || ("0438" == zwaveInfo?.mfr)) ||
    	(state.MSR?.startsWith("019B") || ("019B" == zwaveInfo?.mfr))
    ) ? true : false // If called from installed(), MSR may not exist yet
}

private getNumberOfButtonsOnDevice() {
    if (state.MSR?.contains("-0300-A307") || (("0300" == zwaveInfo?.prod) && ("A307" == zwaveInfo?.model))) {
    	log.trace "HeatIt 2 button scene controller"
        return 2
    } else if (state.MSR?.contains("-0300-A306") || (("0300" == zwaveInfo?.prod) && ("A306" == zwaveInfo?.model))) {
    	log.trace "HeatIt 4 button scene controller"
        return 4
    } else if (state.MSR?.contains("-0300-A305") || (("0300" == zwaveInfo?.prod) && ("A305" == zwaveInfo?.model))) {
    	log.trace "HeatIt 8 button scene controller"
        return 8
    } else {
        log.error "Unknown Button Scene controller: $zwaveInfo"
        return 0
    }
}

// Supported command class versions
private getCommandClassCapabilities() {
    [
        0x85: 2, // Association
        0x8E: 2, // Multi Channel Association (supports v3)
        0x5B: 1, // Central Scene (supports v3)
		0x59: 1, // Association Grp Info
        0x55: 1, // Transport Service (supports v2)
        0x86: 1, // Version (supports v2)
        0x72: 2, // Manufacturer Specific
        0x5A: 1, // Device Reset Locally
        0x7A: 2, // Firmware Update Md (supports v4)
        0x73: 1, // Powerlevel
        0x80: 1, // Battery
        0x98: 1, // Security
        0x84: 2, // Wake Up
    ]
}

private getHeatItParamMap(value = null) {
	[
	]
}

private paramValue(value, bytes) {
    if (value == null || !(value instanceof Number)) {
        return null
    }
        
    //log.trace "Param value: $value, $bytes"

    List<Integer> ret = [] // We start with a Integer list and then convert to array (since arrays are fixed in size)
    for (int i=0; i<bytes; i++) {
        ret = [(((value as Long) >> (i*8)) & 0xFF) as Integer] + ret
    }
    
    //log.debug ret as Integer[]
    
    return ret as Integer[] // We need an integer array
}

private reverseValue(value) {
    if (!value || !List.isCase(value)) {
        return null
    }
        
    //log.trace "Reverse value: $value, $bytes"

    Long ret = 0
    for (int i=0; i<value.size(); i++) {
        ret |= ((((value[i] as Integer) & 0xFF) as Long) << ((value.size() - 1 - i) * 8)) as Long
    }
    
    //log.debug ret
    
    return ret
}

// THIS IS THE END OF THE FILE